/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NotesSync
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  SettingDestinationFolder: "default"
};
var NotesSync = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Hello world: " + this.settings.SettingDestinationFolder);
    this.addSettingTab(new SyncNoteSettingTab(this.app, this));
    this.addCommand({
      id: "toggle-note-sync",
      name: "Toggle the note sync between true and false.",
      callback: () => {
        console.log("Command toggle notes sync " + this.settings.SettingDestinationFolder);
      }
    });
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        try {
          console.log("TRIGGER FROM MODIFY " + file.name + " p:" + file.path);
          const fileContent = this.app.vault.read(file);
          console.log("fc STGART");
          console.log(fileContent);
          console.log("fc END");
          this.app.fileManager.processFrontMatter(
            file,
            (frontmatter) => {
              var _a, _b;
              this.log("current metadata: ", frontmatter);
              if (frontmatter["notesync"] == "true") {
                this.log("NOTES SYNC == TRUE will sync file: " + file.path);
                this.log("NOTES SYNC vault: " + ((_a = file.vault.getAbstractFileByPath(file.path)) == null ? void 0 : _a.path));
                const activeFile = (_b = this.app.workspace.getActiveFile()) == null ? void 0 : _b.path;
                const path = require("path");
                let absPath = path.resolve(activeFile);
                this.log("NOTES SYNC absPath: " + absPath);
                this.log("NOTES SYNC superPath: " + getVaultAbsolutePath(app));
              }
            }
          );
        } catch (e) {
          if ((e == null ? void 0 : e.name) === "YAMLParseError") {
            const errorMessage = `Update time on edit failed Malformed frontamtter on this file : ${file.path} ${e.message}`;
            new import_obsidian.Notice(errorMessage, 4e3);
            console.error(errorMessage);
            return {
              status: "error",
              error: e
            };
          }
        }
      })
    );
    function getVaultAbsolutePath(app2) {
      let adapter = app2.vault.adapter;
      if (adapter instanceof import_obsidian.FileSystemAdapter) {
        return adapter.getBasePath();
      }
      return null;
    }
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  log(...data) {
    console.log("[UTOE]:", ...data);
  }
};
var SyncNoteSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Destination folder").setDesc("Enter the root folder of your destination Obsidian vault").addText((text) => text.setPlaceholder("Directory name").setValue(this.plugin.settings.SettingDestinationFolder).onChange(async (value) => {
      this.plugin.settings.SettingDestinationFolder = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
